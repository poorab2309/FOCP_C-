//(Q1)Create a program that reads a user's name and age, then outputs: "Hello [name], you are [age] years old!"

#include<iostream>
#include <string>
using namespace std;


int main() {
    string name;
    int age;
    cout << "Enter your name : ";
    getline(cin, name);
    cout << "Enter your age : "; 
    cin >> age;
    cout << "Hello " << name << ", you are " << age << " years old." << endl;


    return 0;
}

//Q2)
//Write a program to take two integers as input and display their sum.

#include<iostream>
using namespace std;


int main() {

    int a,b;
    cout << "Enter first number : ";
    cin >> a;
    cout << "Enter Second number : ";
    cin >> b;
    cout << a << " + " << b << " = " << a+b ; 

    return 0;
}

//Q3)
//Ask the user to input two numbers and a mathematical operator (+, -,*, /) and display the result of the operation. Eg 3 4* output 12 (Hint: use switch case)

#include<iostream>
using namespace std;

int a, b;
char c;
int main() {

    cout << "Enter first number : ";
    cin >> a;
    cout << "Enter second number : ";
    cin >> b;
    cout << "Enter operation (+,-,*,/)";
    cin >> c;

switch(c) {
    
    case '+':
        cout << a << c << b << " = " << a+b << endl;
        break;
    case '-':
        cout << a << c << b << " = " << a-b << endl;
        break;
    case '*':
        cout << a << c << b << " = " << a*b << endl;
        break;
    case '/':
        cout << a << c << b << " = " << a/b << endl;
        break;
}


    return 0;
}
//Q4
//Take two floating-point number is input and display their division result with two decimal places.

#include<iostream>
#include<iomanip>
using namespace std;

int main() {

    float a,b,c;
    cout << "Enter first number : ";
    cin >> a;
    cout << "Enter Second number : ";
    cin >> b;

    if (b == 0) {
        cout << "Division by zero is not allowed. :( " << endl; } 
    else {
        c = a / b;
        cout << fixed << setprecision(2);
        cout << a << " / " << b << " = " << c << endl;

    }

    return 0;
}
//Q5
//Write a program that calculates the compound interest for a given principal amount, rate of interest, and time period using constants and user input for variables.

#include <iostream>
#include <cmath>

using namespace std;

int main() {
    float p, r, t, amount, ci;
    

    cout << " principal amount: ";
    cin >> p;
    cout << " rate of interest : ";
    cin >> r;
    cout << "time (years): ";
    cin >> t;


    amount = p * pow((1 + r / 100), t);
    ci = amount - p; 

    cout << "Compound Interest: " << ci << endl;
    cout << "Total Amount after " << t << " years: " << amount << endl;

    return 0;
}

//Q6
//Write a program that calculates the area and perimeter of a rectangle using user-provided length and with. Use constants where necessary.

#include <iostream>
using namespace std;

int main() {
    float length, width;

    cout << "Enter  length: ";
    cin >> length;
    cout << "Enter width: ";
    cin >> width;

    float area = length * width ;
    float perimeter = 2 * (length + width);

    cout << "Area of rectangle: " << area << endl;
    cout << "Perimeter of rectangle: " << perimeter << endl;

    return 0;
}
//Q7
//Write a program to swap two numbers using a temporary variable and then without using a temporary variable.

#include <iostream>
using namespace std;

int main() {

    int a, b, c;
    cout << "Enter two numbers: ";
    cin >> a >> b;

    c = a;
    a = b;
    b = c;

    cout << "After swap: a = " << a << ", b = " << b << endl;


    cout << "Enter two new numbers : ";

    cin >> a >> b;

    a = a + b; 
    b = a - b;
    a = a - b;

    cout << "After swap : a = " << a << ", b = " << b << endl;

    return 0;
}

//Q8)
//Write a program that takes the user's full name and age as input and displays a greeting with the name and the number of days they have lived.

#include <iostream>
#include <string>
using namespace std;

int main() {
    string name;
    int age;


    cout << "Enter your name: ";
    getline(cin, name);
    cout << "Enter your age: ";
    cin >> age;

    int days = age * 365;

    cout << "Hello, " << name << "! Etne din jee liya!" << days << " days." << endl;

    return 0;
}
//Q9)
//Create a program that takes three inputs: a character, an integer, and a floating-point number. Display them in a formatted table.

#include <iostream>
#include <iomanip>
using namespace std;

int main() {
    char c;
    int i;
    float f;

    cout << "Enter a character: ";
    cin >> c;
    cout << "Enter an integer: ";
    cin >> i;
    cout << "Enter a float: ";
    cin >> f;


    cout << "\nFormatted Output:\n";
    cout << "-----------------------------------------------" << endl;
    cout << left << setw(20) << "Character" << setw(20) << "Integer" << setw(20) << "Float" << endl;
    cout << "-----------------------------------------------" << endl;
    cout << left << setw(20) << c << setw(20) << i << setw(20) << fixed << setprecision(2) << f << endl;
    cout << "-----------------------------------------------" << endl;

    return 0;
}

//Q10)
//Develop a program that takes two integers as input and determines if the first is a multiple of the second using relational and logical operators.

#include <iostream>
using namespace std;

int main() {
    int n1, n2;
    
    cout << "Enter the first num: ";
    cin >> n1;
    cout << "Enter the second num: ";
    cin >> n2;

    if (n2 != 0 && n1 % n2 == 0) {
        cout << n1 << " is a multiple of " << n2 << "." << endl;
    } else {
        cout << n1 << " is not a multiple of " << n2 << "." << endl;
    }
    
    return 0;
}

//Q11)
//Create a program to count the number of 1 bits in an integer input by the user.

#include <iostream>
using namespace std;

int count(int num) {
    int count = 0;
    while (num > 0) {
        count += num & 1; 
        num >>= 1; 
    }
    return count;
}

int main() {
    int num;
    
    cout << "Enter an integer: ";
    cin >> num;
    
    cout << "The number of 1 bits in " << num << " is: " << count(num) << endl;
    
    return 0;
}

//Q12)
//Write a program that solves a quadratic equation (ax*2 + bx + Â© = 0) using conditional statements to handle all possible cases (real and distinct roots, real and equal roots, complex roots).

#include <iostream>
#include <cmath>
using namespace std;

int main() {
    int a, b, c;
    cout << "Enter coefficients a, b, and c: ";
    cin >> a >> b >> c;

    if (a == 0) {
        if (b != 0) {
            int root = -c / b;
            cout << "This is a linear equation, The root is: " << root << endl;
        }
     else {
        if (c == 0) {
            cout << "Infinite  ." << endl;
        } else {
     cout << "no solution .." << endl; }
        
        
        
        }
    } else {



        int discriminant = b * b - 4 * a * c;

        if (discriminant > 0) {
            // Real and distinct roots
            int root1 = (-b + sqrt(discriminant)) / (2 * a);
            int root2 = (-b - sqrt(discriminant)) / (2 * a);
            cout << "The roots are real and distinct.: " << root1 << " and " << root2 << endl;


        } 
        else if (discriminant == 0) {
        
            int root = -b / (2 * a);
            cout << "The roots are real and equal. " << root << endl;
        } else {
            // Complex roots
            int realPart = -b / (2 * a);
            int imaginaryPart = sqrt(-discriminant) / (2 * a);

            cout << "The roots are complex. : " << realPart << " + " << imaginaryPart << "i and "
                 << realPart << " - " << imaginaryPart << "i" << endl;
        }
    }

    return 0;
}

//13)
//Create a program to simulate an ATM machine using a switch statement. Include options for withdrawal, deposit, balance inquiry, and exit, with error handling for invalid input and insufficient balance.

#include <iostream>
using namespace std;

int main() {
    double balance = 1000.0; 
    int choice;
    double amount;

    do {

        cout << "\n--- ATM Menu ---" << endl;
        cout << "1. Balance Inquiry" << endl;
        cout << "2. Deposit" << endl;
        cout << "3. Withdrawal" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

 
        switch (choice) {
             case 1: 
                cout << "current balance : Rs" << balance << endl;
                break;

            case 2:
                cout << "amt to be deposited : Rs";
                cin >> amount;
                if (amount > 0) {
                    balance += amount;
                    cout << "new balance updated  Rs" << balance << endl;
                } else {
                    cout << " enter correct amount"  << endl;
                }
                break;

            case 3: 
                cout << "amount to be withdrew .: Rs";
                cin >> amount;
                if (amount > 0) {
                    if (amount <= balance) {
                        balance -= amount;
                        cout << "amount withdrew , new balance: Rs" << balance << endl;
                    } else {
                        cout << "invalid balance ,current balance is : Rs" << balance << endl;
                    }
                } else {
                    cout << "incorrect ." << endl;
                }
                break;

            case 4:
                cout << "Thank you for using the ATM d." << endl;
                break;

            default:
                cout << "choose valid option ." << endl;
                break;
        }
    } while (choice != 4);

    return 0;
}

//14) //Develop a program that checks if a triangle is valid based on the lengths of its sides and determines its type (equilateral, isosceles, or scalene) using nested if-else statements.

#include <iostream>
using namespace std;

int main() {
    int a, b, c;

    cout << "Enter the three sides of the triangle: ";
    cin >> a >> b >> c;

   if (a + b > c && a + c > b && b + c > a) {

        cout << "triangle is valid!!" << endl;

        if (a == b && b == c) {

            cout << "The triangle is equilateral." << endl;
        } else if (a == b || b == c || a == c) {
    
            cout << "The triangle is isosceles." << endl;
        } else {

            cout << "The triangle is scalene." << endl;
        }
    } else {
  
        cout << "Kaha se laye yeh value triangle he galat hai......" << endl;
    }

    return 0;
}
//Q15)
//Write a program to evaluate (a*b + c&d) where a, b, c, and d are user inputs. Explain the precedence of bitwise operators in the program.

#include <iostream>
using namespace std;

int main() {
    int a, b, c, d;

    cout << "Enter values for a, b, c, and d: ";
    cin >> a >> b >> c >> d;

    int result = (a * b + c & d);

    cout << "The result of (a * b + c & d) is: " << result << endl;

    return 0;
}
Q16))
//Write a program that determines whether two integers are opposites in sign without using conditional statements (hint: use bitwise XOR).

#include<iostream>
using namespace std;


bool opps(int a, int b) {
          return (a ^ b) < 0; }



int main() {
     int n1, n2;
    
cout << "Enter two numbers: ";
cin >> n1 >> n2;
      if (opps(n1, n2)) {
         cout << "Numbers have opposite signs.\n"; } 
    
      else {cout << "Numbers have the same sign.\n";  }

    return 0;
}
Q17))
//17,Create a program to perform division without using the / operator, implementing both integer and floating-point division manually

#include<iostream>
#include <iomanip>
using namespace std;


double Div(double dend, double dsor) {

    if (dsor == 0) {
        cout << "Error,its zero!!" << endl;
         return 0; }

      double qu = 0;

    while (dend >= dsor) {
        dend -= dsor;
        qu++; }      //ques without decimal point........

   double factor = 0.1;  //for first place decimal 
    for (int i = 0; i < 2; i++) { //for 2 decimal place 
        dend *= 10;
        int t = 0;
        while (dend >= dsor)   {  //int devi ke jaisa haiiii.
            dend -= dsor;
            t++; }

        qu += t * factor; //decimal with inti.
        factor /= 10;   } //to shift to next decimal 

          return qu;  //with decimal point 


}


int main() {

double n1, n2;

    cout << "Enter two numbers: "; //kyu?
    cin >> n1 >> n2;

cout << fixed << setprecision(2);
cout << "Result: " << Div(n1, n2) << endl; //calculator use kar lo

    return 0;

    
}

Q18))
//Develop a program that performs a circular left and right shift of bits on a given integer and displays the results.

#include<iostream>
using namespace std;


int main() {
    int n, s;
    cout << "Enter number: ";
    cin >> n;
    cout << "Enter shif: ";
    cin >> s;

int ls = (n << s) | (n >> (32 - s));  
int rs = (n >> s) | (n << (32 - s)); 

    cout << "After ls: " << ls << endl;
    cout << "After rs: " << rs << endl;

    return 0;
}

Q19))
//Write a program that calculates the grade of a student based on their marks using if-else/switch statements.

#include <iostream>
#include <string>
using namespace std;

int main() {

    int m;
    cout << "Enter how much you got in finals, and be honest  ): ";
     cin >> m;

      string g;

int s = m / 10;  

     switch (s) {


    
        case 10:
             g = "A++, woah thats amazing, brotha ???";
    break;

        case 9:
             g = "A+, topper, brotha ";
    break;

        case 8:
            g = "A, noiceee";
    break;

        case 7:
        g = "B+, you can do better, brotha ";
            
    break;
        case 6:
           
            g = "B, thats fine, brotha ";
      break;

        case 5:

            g = "C, needs improvement, brotha ";
      break;

        case 4:

            g = "D, what the shit , you dont study???";
      break;

        default:

            g = "F, bhai ki back aa gayiii .";
            
            break;


}


    cout << "The grade for marks " << m << " is: " << g << endl;
    
        return 0; }

Q20)))
//Create a simple Menu Driven calculator that performs addition, subtraction, multiplication, & division based on the user's choice & repeat the menu until the user chooses to "Exit".

#include <iostream>
using namespace std;

  int main() {
       int ch;
      double n1, n2, rx;

    do {

        cout << "\n============== CALCULAATOOR ==============\n";
       cout << "press 1 for addition \n";
         cout << "press 2 for subtraction \n";
         cout << "press 3 for multiplication \n";
         cout << "press 4 for division \n";
         cout << "5 for exit \n";
         cout << "what's next  : ";

        cin >> ch;


    if (ch >= 1 && ch <= 4) {

        cout << "Enter first number: ";
             cin >> n1;

        cout << "Enter second number: ";
             cin >> n2; }


         switch (ch) {

            case 1:
                rx = n1 + n2;
                cout << "Result: " << rx << endl;
                 break;

            case 2:
                rx = n1 - n2;
                cout << "Result: " << rx << endl;
                 break;

            case 3:
                rx = n1 * n2;
                cout << "Result: " << rx << endl;
                 break;

            case 4:

                if (n2 != 0)
                    rx = n1 / n2;

                else
                    cout << "Error " << endl;

                break;

            case 5:

                cout << "Exiting calculator,thank you for using it  :) \n";

                break;

            default:
                cout << "press the correct button, brotha  .\n";
        }

    } 
    
    while (ch != 5);

    return 0;
}

Q21)))
//Develop a program to check wher a year is a leap year using nested if-else statements.

#include <iostream>
using namespace std;

int main() {
    int year;
    cout << "Enter a year: ";
    cin >> year;
            
    if (year % 4 == 0) { 
        
        
      if (year % 100 == 0) { 

         if (year % 400 == 0) { 

         cout << year << " is leap year." << endl;}
         
          else {
                cout << year << " is not leap year." << endl; }
                }  
                
                else { cout << year << " is leap year." << endl; } //for2
                } 
          
          else 
          
          {cout << year << " is not leap year." << endl;}

    return 0;
}
Q22))
// Write a program to generate the first n Fibonacci numbers using a for loop.

#include <iostream>
using namespace std;

int main() {
     int n;
cout << "Enter the number of Fibonacci numbers: ";
cin >> n;

    int a, b;
    a =  0;
    b = 1;


         for (int i = 0; i < n; i++) {
         cout << a << " ";
    int n = a + b;
    a = b;
    b = n; }

      return 0;
      
}
Q23)))
// Create a program that determines whether a given number is prime using a while loop.

#include <iostream>
using namespace std;


int main() {
    int n, a = 2;
    bool pr = true;

    cout << "Enter a no. to check : ";
    
    cin >> n;

    if (n <= 1) {
        pr = false; } 
    
    else {
        while (a < n) {
            if (n % a == 0) {
                pr = false;
                break; }
            a++; }
}

    if (pr==true)
        cout << n << " prime  ." << endl;
    else
        cout << n << " not prime " << endl;

    return 0;
}

Q24))
//Write a program to calculate the factorial of a number using a do-while loop.

#include <iostream>
using namespace std;

 int main()  {
    int n;
    float fact = 1;

     cout << "Enter number: ";
      cin >> n;

     int a = 1;
     do {
        fact *= a;
        a++;
        
    } 
    while (a <= n);

    cout << "Factorial of " << n << " is " << fact << endl;
    
    return 0;
}
Q25))
/* Create a program that continuously accepts user input of integers until the user types "exit".
At the end, display:
â¢ The sum of all entered numbers.
â¢ The count of valid integers entered.
â¢ The maximum and minimum numbers. */

#include <iostream>
#include <string>
#include <cctype>

using namespace std;

bool corr(string in) {   //check corr or not

//empty, number, positive

    if (in.empty()) return false;

    if (in[0] == '-') return false;

int ss = in.size();
    for (int i = 0; i < ss; i++) { 
               if (!isdigit(in[i])) {
            return false;  } }

    return true;

}



int main() {

    string in;
    int num, sum = 0, count = 0;
    int max = 0; 
    int min = 0;

//loop ke start

 do {

        cout << "Enter a positive integer or to stop enter 'exit' :  ";
        cin >> in;

        if (in == "exit") 
        break; //RIP



if (corr(in) == 1) {
        num = stoi(in);
        count ++;
        sum += num;



    if (count == 1) {
            max = min = num; } 
            else {
        if (num > max) max = num;
        if (num < min) min = num;  }
         }
 }
    while (in != "exit");  // Infinite loop ...

//result ke liye

    if (count > 0) {
        cout << "\nPura result.:\n";
        cout << "Sum: " << sum << endl;
        cout << "Count: " << count << endl;
        cout << "Max: " << max << endl;
        cout << "Min: " << min << endl;
    } 
    
    else {
        cout << "at least entere the correct integer ." << endl;}

    return 0; }

Q26))
//Write a program to generate and display the first n prime numbers using a combination of for and while loops.

#include <iostream> 
using namespace std;


int main() {

int n, count = 0, num = 2;

cout << "enter how much prime no. you need ?: ";
cin >> n;

    while (count < n) {   // running for loop till n
        bool isPrime = true;

for (int i = 2; i < num; i++) {   // checking prime num
    if (num % i == 0) {
     isPrime = false;

 break; }  }

        if (isPrime) { 
        cout << num << " ";
        count++;
        }

        num++;  
        } //while khatam

    cout << endl;
    return 0;
}

Q27))
// Create a program that finds and displays all Armstrong numbers within a given range using nested loops.

#include <iostream>
#include <cmath>
using namespace std;


// to check a number is iam strong?? 

bool iamstrong(int num) {
int ognum = num, sum = 0, digi = 0;

int celcius = num;

while (celcius > 0) {
    celcius /= 10;
    digi++;  }



    celcius = num;
while (celcius > 0) {
    int digit = celcius % 10;
    sum += pow(digit, digi);
    celcius /= 10; }


    return sum == ognum;
}



void serstrong(int start, int end) {

cout << "Armstrong numbers between " << start << " and " << end << " are:\n";
for (int num = start; num <= end; num++) {
    if (iamstrong(num)) { cout << num << " ";  }
    }


    cout << endl;
}


int main() {
    int sran, eran;


cout << "Enter the start of the range: ";
cin >> sran;
 cout << "Enter the end of the range: ";
cin >> eran;

    serstrong(sran, eran);

    return 0;
}
Q28))
//Develop a program to simulate a number-guessing game where the user has limited attempts to guess a randomly generated number. Provide feedback for each guess (too high, too low) and terminate the game when the number is guessed or attempts are exhausted.

#include <iostream>
#include <cstdlib>  
#include <ctime> 
using namespace std;


// random number ke liye
int getran(int l, int h) {  
    return l + rand() % (h - l + 1);
}


// this functon will run games wwith govem no. of attemps 
void game(int maxatt) {  
    srand(time(0));  // Random seed for rndom no.s

    int secret = getran(1, 10);  // random no. form 1 to 10
    int guess;  // to store user's input 
    int atm = 0;

    cout << "Number Guessing Game Start! (1-10)\n";
    cout << "you have " << maxatt << " attempts . lets start !\n\n";



    // loop till the game ends 

    while (atm < maxatt) {  

        cout << "enter your guess: ";
        cin >> guess;

        if (guess < 1 || guess > 10) {  // Invalid input case
            cout << "bro , you had to imput from  1 se 10 !\n";
            continue;  // dont count if wrong 
        }

        atm++;

        if (guess == secret) {  
            cout << "congo , you guessed correct in  " << atm << " attempts .\n";
            return;
        } else if (guess > secret) {  
            cout << "too big ! Think small .\n";
        } else {  
            cout << "too small! Think big .\n";
        }

        // too see how many attempts left 
        cout << "attempts left : " << (maxatt - atm) << "\n\n";
    }

    // if reached here that means you are out of attemps 
    cout << "Oh no! you finished your attemps . \n";
    cout << "that no. was : " << secret << "\n";
}





int main() { 

int max = 3; 

game(max);

return 0;
}
Q29))
//Create a program to find the first number greater than 50 that is divisible by 7.

#include <iostream>
using namespace std;



int findNumber() {    
    int num = 51;  

    while (num % 7 != 0) {  
        num++;    }

    return num;  
}

int main() {
    cout  << findNumber() << endl;   
    return 0;  
}
Q30))
//Write a program that prints all numbers between 1 and 500, skipping numbers divisible by both 3 and 7. Stop printing numbers if the sum of printed numbers exceeds 1000.

#include <iostream>
using namespace std;

int main() {
    
    int sum = 0;    
    for (int num = 1; num <= 500; num++) {  
        
        if (num % 3 == 0 && num % 7 == 0) {  
            continue;  // Skip kar diya yeh number 
        }
        
        cout << num << " ";   
        sum += num;    

        if (sum > 1000) {    
            cout << "\nBas bhai, sum 1000 cross kar gaya!" << endl;  
            break;  
        }
    }
    
    return 0;
}
Q31)))//Develop a program to reverse the digits of a given number and terminate early if the reversed number becomes a palindrome.

#include <iostream>
using namespace std;


int ultaKar(int num) {   
    int naya = 0, original = num;   
    while (num > 0) {  
        naya = naya * 10 + (num % 10);  // Last digit ko aage daal rahe
        num = num / 10;    
    }
    return naya;  
}


bool sameHai(int num) {  
    return num == ultaKar(num);  
}

int main() { 
    
    int  n;  
    cout << "Number do plsss: ";  
    cin >> n;   

    int prev = -1;  
    
    while (true) { 
        
        int reversed = ultaKar(n);   
        cout << "Ulta number: " << reversed << endl;  

        if (sameHai(reversed)) {  
            cout << "wait Palindrome mil gaya!  -> " << reversed << endl;    
            break;  // 
        }

        if (reversed == prev) {  
            cout << "yeh toh loop ban gaya! Ruk raha hu..." << endl;
            break;
        }

        prev = n;  
        n = reversed;
    }

    return 0;  
}
Q32)))

//Write a program that takes an integer array from the user and finds the second largest element.

#include <iostream>
using namespace std;

int secondLargest(int arr[], int size) {  
    int first = -1, second = -1;  

    for (int i = 0; i < size; i++) {  
        if (arr[i] > first) {  
            second = first;  
            first = arr[i];  
        } 
        else if (arr[i] > second && arr[i] != first) {  
            second = arr[i];  
        }
    }

    return second;  
}

int main() {  
    int n;  
    cout << "Kitne elements hain? ";  
    cin >> n;  

    int arr[n];  
    cout << "Array ke elements enter karo: ";  
    for (int i = 0; i < n; i++) {  
        cin >> arr[i];  
    }

    int ans = secondLargest(arr, n);  

    if (ans == -1)  
        cout << "Second largest nahi mila! ð¤·ââï¸" << endl;  
    else  
        cout << "Second largest element: " << ans << endl;  

    return 0;  
}
Q33)))
//Create a program that determines whether a given floating-point number can be represented exactly in binary format and explains why (hint: binary representation of floating-point numbers).

#include <iostream>
#include <iomanip>
using namespace std;

// Checks if no. is binary is not
bool check(double x) {  
    return (x == (double)x);  
}

int main() {  
    double n;  
    cout << "Number ?????: ";  
    cin >> n;  

    if (check(n)) {  
        cout << fixed << setprecision(20);  
        cout << "yes, this no. can be stored  -> " << n << endl;  
    } 
    else {  
        
        cout << "can't be stored in binary " << endl;  
        cout << "Reason: some binary no. have infinite conversions  (like  0.1, 0.2, etc.)." << endl;  
    }

    return 0;  
}

Q34))
//Create a program that takes input for a 2D array and prints the array in a formatted table, ensuring proper alignment of all elements.

#include <iostream>
#include <iomanip>
using namespace std;

int main() {  
    int r, c;  
    cout << "Rows aur Columns enter: ";  
    cin >> r >> c;  

    int arr[r][c];  

    // Input here
    cout << "Elements enter :\n";  
    for (int i = 0; i < r; i++) {  
        for (int j = 0; j < c; j++) {  
            cin >> arr[i][j];  
        }  
    }  

    // Table print here
    cout << "\nFormatted Table :\n";  
    for (int i = 0; i < r; i++) {  
        for (int j = 0; j < c; j++) {  
            cout << setw(5) << arr[i][j] << " ";  // for Proper alignment use setw(5)  
        }  
        cout << endl;  
    }  

    return 0;  
}
Q35))
//Write a program to calculate the Least Common Multiple (LCM) and Greatest Common Divisor (GCD) of two integers.

#include <iostream>
using namespace std;

// method for  GCD 
int gcd(int a, int b) {  
    while (b != 0) {  
        int temp = b;  
        b = a % b;  
        a = temp;  
    }  
    return a;  
}

// formula of lcm 
int lcm(int a, int b) {  
    return (a * b) / gcd(a, b);  
}

int main() {  
    int x, y;  
    cout << "enter the goddamn numbers : ";  
    cin >> x >> y;  

cout << "GCD: " << gcd(x, y) << endl;  
cout << "LCM: " << lcm(x, y) << endl;  

    return 0;  
}






